priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def nl(snip):
    if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
    snip += ""
    else:
    snip.rv += " "
def getArgs(group):
    import re
    word = re.compile('[a-zA-Z><.]+ \w+')
    return [i.split(" ") for i in word.findall(group) ]

def camel(word):
    if not word: return ''
    return word[0].upper() + word[1:]

def mixedCase(word):
    if not word: return ''
    return word[0].lower() + word[1:]

endglobal

snippet heading "Heading"
// James Wang
// APCS1 pd9
// HW#${1:Number} ${2:Title}
// `!v strftime("%Y-%m-%d")`

$0
endsnippet

snippet sleep "try sleep catch" b
try {
    Thread.sleep(${1:1000});
} catch (InterruptedException e){
    e.printStackTrace();
}
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
    snip.rv += "\n    private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
    snip.rv += "\n"`
    public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
    snip.rv += "\n        this." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
    snip.rv += "\n"`
    }$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
    snip.rv += "\n    public void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
    \tthis." + i[1] + " = " + i[1] + ";\n    }\n"

    snip.rv += "\n    public " + i[0] + " get" + camel(i[1]) + "() {\
    \n        return " + i[1] + ";\n    }\n"
`
}
endsnippet

snippet clc "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
    snip.rv += "\n    private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
    snip.rv += "\n"`
    public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
    snip.rv += "\n        this.%s = %s;" % (i[1], i[1])
if len(args) == 0:
    snip.rv += "\n"`
    }
}
endsnippet

snippet clc "class and constructor" b
public class `!p
snip.rv = snip.basename or "untitled"` {

    public `!p snip.rv = snip.basename or "untitled"`($2) {
    $0
    }
}
endsnippet

snippet list "collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet cn "constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
    $0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
    `!p
args = getArgs(t[1])
for i in args:
    snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
    snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
    snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
    snip.rv += "\n"`
}
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
    $0
}
endsnippet

snippet m  "method" b
${1:private} ${2:void} ${3:method}(${4}) {
    $0
}
endsnippet

snippet md "method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
    snip.rv += "\n\t * @param " + i[1] + " usage..."`
 * `!p
if "throws" in t[5]:
    snip.rv = "\n\t * @throws " + t[6]
else:
    snip.rv = ""` `!p
if not "void" in t[2]:
    snip.rv = "\n\t * @return object"
else:
    snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
    $0
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}() {
    return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
    this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
    this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}

public $2 get$1() {
    return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet print "print" b
System.out.print($1);$0
endsnippet

snippet println "println"  b
System.out.println($1);$0
endsnippet

# vim:ft=snippets:
