# General Settings {{{

HISTCONTROL=ignoreboth
HISTCONTROL=ignoredups
# Append to the history file
shopt -s histappend

# Set history size
HISTSIZE=5000
HISTFILESIZE=5000

# Makes navigating through files easier
[[ $- = *i* ]] && bind TAB:menu-complete

# Auto update the values of LINES and COLUMNS.
shopt -s checkwinsize

export EDITOR=vim

# Color support {{{
# enable color support of ls and also add aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=01;92:st=37;44:ex=01;04:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:'
export LS_COLORS

# }}}
# }}}
# Bash Prompt {{{

# COLORS
# Ensures no weird invisible colors
BGREEN='\[\033[1;32m\]'
GREEN='\[\033[0;32m\]'
BRED='\[\033[1;31m\]'
RED='\[\033[0;31m\]'
BBLUE='\[\033[1;34m\]'
BLUE='\[\033[0;34m\]'
RESET='\[\033[0m\]'
BWHITE='\[\033[1;37m\]'
WHITE='\[\033[0;37m\]'
OFF="\[\033[m\]"


# Acquires the current working branch in a repo
function GitBranch {
    if [[ ! $(git status 2>&1) =~ "fatal" ]]; then
        echo " ($(git branch | grep '*' | grep -o '[^* ]*') $(GitUpToDate))" # Extracts current git branch using grep and regexes
    fi
}

# If the local git repo is up to date with online one
function GitUpToDate {
    status=$(git status)

    if [[ $status =~ "Changes to be committed" ]]; then
        echo -ne "\u2718" # Cross

    else
        echo -ne "\u2714" # Check
    fi

    if [[ $status =~ "Changes not staged for commit" ]]; then
        echo -ne " \u0394" # Delta
    fi

    echo -ne "\n"
}

function CatchExitCode() {
    status=$?
}

# Changes the sign of the user based on various conditions
function Sign {
   # The sign changes based on whether or not the user inputted a valid command
   if [[ $status == 0 ]]; then
        echo " :)"
    else
        echo " :("
    fi
}

# Shows the current time
function Time {
    if [[ $showTime != true ]]; then
        return
    fi
    date=$(date "+%I:%M")
    echo "[$date]"
}

# Shows the current period
function Period {
    if [[ $showPeriod != true ]]; then
        return
    fi
    period=$(python ~/Documents/schedule.py )
    echo " [$period]"
}

# Shows the end of the current period
function EndPeriod() {
    if [[ $showEnd != true ]]; then
        return
    fi
    end=$(python ~/Documents/endtimes.py )
    echo " [$end]"
}

# Alters the display of the user
function User {
    echo -n "James"
    echo -n "@$(hostname)"
}

# Shows the present working directory
function Pwd {
    echo -n "$PWD" | sed -r "s|$HOME|~|g"
}

# Store last exit status code before generating a prompt
status=0
PROMPT_COMMAND="CatchExitCode"
prompt="${BGREEN}\$(Time)\$(Period)\$(EndPeriod) ${OFF}\$(User)${BBLUE} [\$(Pwd)]${BGREEN}\$(GitBranch)${BWHITE}\$(Sign) >> "
PS1=$prompt

# Configuration options
showTime=true
showPeriod=true
showEnd=true

# Configuration aliases
alias hoston="export showHostname=true"
alias hostoff="export showHostname=false"
alias periodon="export showPeriod=true"
alias periodoff="export showPeriod=false"
alias endon="export showEnd=true"
alias endoff="export showEnd=false"

# }}}
# Functions {{{

# Go back to your previous directory (not the same as cd ..)
function back {
    eval cd $(echo $OLDPWD | sed -r 's/[ ]+/\\ /g')
}

# Compile a cpp file with opencv because lazy
function cppcompile {
    if [[ "$#" != "2" ]]; then
        echo "Usage: cppcompile [cpp file] [name]"
    else
        eval g++ $1 -o $2 `pkg-config --libs opencv --cflags`
    fi
}

# Extracts any compressed file
function extract {
    if [-f $1] ; then
        case $1 in
            *.tar.bz2)      tar xjf $1;;
            *tar.gz)        tar xzf $1;;
            *bz2)           bunzip2 $1;;
            *.rar)          rar x $1;;
            *.gz)           gunzip $1;;
            *.tar)          tar xf $1;;
            *.tbz2)         tar xzf $1;;
            *.tgz)          unzip $1;;
            *.Z)            uncompress $1;;
            *)              echo "'$1' cannot be extracted via extract"
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Handy reminder that reminds user about a task
function reminder {
    PS1="$PS1\[$(tput setaf 7)\](Reminder: " # Add space to PS1, change text color
    for word in "$@"
    do
        PS1="$PS1$word "
    done
    PS1="${PS1:0:$[${#PS1}-1]})\[$(tput sgr0)\] "
    echo "Reminder set: $@"
}

# Unzips a file and removes it
function ziprm {
	if [ -f $1 ] ; then
		unzip $1
		rm $1
	else
		echo "Need a valid zipfile"
	fi
}

# }}}
# Aliases {{{

# file manipulation aliases
alias ll='ls -alF'
alias la='ls -A'
alias lh='ls -ahl'
alias l='ls -CF'
alias rm='rm -I'

# movement aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
# }}}
# Bash completion {{{
# enable programmable completion features
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# }}}
