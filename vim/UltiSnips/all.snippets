# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
	while True:
	    # get the flags and text of a comment part
	    flags, text = next(i).split(':', 1)

	    if len(flags) == 0:
		rv.append((text, text, text, ""))
		# parse 3-part comment, but ignore those with O flag
	    elif 's' in flags and 'O' not in flags:
		ctriple = []
		indent = ""

		if flags[-1] in string.digits:
		    indent = " " * int(flags[-1])
		ctriple.append(text)

		flags,text = next(i).split(':', 1)
		assert(flags[0] == 'm')
		ctriple.append(text)

		flags,text = next(i).split(':', 1)
		assert(flags[0] == 'e')
		ctriple.append(text)
		ctriple.append(indent)

		rv.append(ctriple)
	    elif 'b' in flags:
		if len(text) == 1:
		    rv.insert(0, (text,text,text, ""))
    except StopIteration:
	return rv

def _get_comment_format():
    """ Returns a 4-element tuple representing the comment format for
    the current file. """
    return _parse_comments(vim.eval("&comments"))[0]


def make_box(twidth, bwidth=None):
    b, m, e, i = _get_comment_format()
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m[0] + 2 * m[0]
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
    return sline, mlines, mlinee, eline

endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:content}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
width = int(vim.eval("&textwidth")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:content}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet fold "Vim fold marker pair" b
"{{{ ${1:DESCRIPTION}
$0
" }}}
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

snippet lorem "Lorem Ipsum - 100 Words" b
Dapibus. In dui aptent parturient praesent eget fusce a nibh massa.
Pede velit ad lacus vehicula, interdum curabitur volutpat egestas vehicula a. Et mi.
Viverra scelerisque luctus, cubilia inceptos pretium rutrum. Habitasse eleifend
vehicula sociosqu. Curabitur, litora imperdiet turpis a conubia. Morbi sit porta
habitant magnis habitasse habitasse aenean morbi vel aptent parturient
Praesent ac rutrum litora mi gravida libero.  Eu ut eros vivamus conubia enim
ultricies ullamcorper etiam urna phasellus quis litora sodales, torquent cubilia
gravida egestas aliquam dui porta. Nisi nec habitasse odio fames lorem adipiscing morbi nec.
Conubia iaculis vehicula ad vivamus lorem natoque aliquet tellus fermentum.
endsnippet

##########################
# VIM MODELINE GENERATOR #
##########################
# See advice on `:help 'tabstop'` for why these values are set. Uses second
# modeline form ('set') to work in languages with comment terminators
# (/* like C */).
snippet modeline "Vim modeline"
vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

# vim:ft=snippets:
